root = {
    SOI ~ ws? ~ sym ~ ws? ~ EOI
}

sym = { mono ~ (ws? ~ mono)* }

mono = {
    newline
  | tab
  | group
  | command
  | collection
  | text
  | font
  | logic
  | script
  | sets
  | arrow
  | numeric
  | operator
  | dot
  | alphabetic
  | punctuation
}

newline = { "\\n" }
tab     = { "\\t" }

group = { "((" ~ ws? ~ sym ~ ws? ~ "))" }

numeric = @{ ("-" | "+")? ~ NUMBER+ ~ ("." ~ NUMBER+)? }

alphabetic  = { ALPHABETIC+ }
punctuation = {
    ","
  | "!"
  | ":"
  | "|"
  | "?"
  | "%"
  | "&"
  | "£"
  | "$"
}

dot = {
    dot_triple
  | dot_compose
  | dot_centre
}

dot_centre  = { "." }
dot_triple  = { "..." }
dot_compose = { ".o" }

operator = {
    op_arith_add
  | op_arith_sub
  | op_arith_mul_dot
  | op_arith_mul_cross
  | op_arith_mul
  | op_arith_div
  | op_arith_frac
  | op_arith_div_raw
  | op_ne_equiv
  | op_ne_eq
  | op_ne_ge
  | op_ne_le
  | op_ne_gt
  | op_ne_lt
  | op_ne_bar
  | op_eq_equiv
  | op_eq_eq
  | op_eq_ge
  | op_eq_le
  | op_eq_gt
  | op_eq_lt
  | op_eq_colon
  | op_eq_bar
}

op_arith_add       = { "+" }
op_arith_sub       = { "-" }
op_arith_mul       = { "*" }
op_arith_div       = {
    "./."
}
op_arith_div_raw   = {
    "/"
}
op_arith_mul_dot   = { "*." }
op_arith_mul_cross = { "*x" }

op_arith_frac      = { "/" ~ op_arith_frac_expr ~ (ws? ~ "/" ~ op_arith_frac_expr)+ ~ ws? ~ "/" }
op_arith_frac_expr = { mono ~ (ws? ~ !("/") ~ mono)* }

op_eq_eq    = { "=" }
op_eq_gt    = { ">" }
op_eq_lt    = { "<" }
op_eq_ge    = { ">=" }
op_eq_le    = { "<=" }
op_eq_equiv = { "==" ~ "="? }
op_eq_colon = { ":=" }
op_eq_bar   = { "|=" }

op_ne_eq    = { "!=" }
op_ne_gt    = { "!>" }
op_ne_lt    = { "!<" }
op_ne_ge    = { "!>=" | ">!=" }
op_ne_le    = { "!<=" | "<!=" }
op_ne_equiv = { "!==" ~ "="? }
op_ne_bar   = { "|!=" }

arrow = {
    arr_up
  | arr_down
  | arr_long_double
  | arr_long_left
  | arr_long_right
  | arr_double
  | arr_left
  | arr_right
  | arr_thick_long_double
  | arr_thick_long_left
  | arr_thick_long_right
  | arr_thick_double // | arr_thick_left

  | arr_thick_right
  | arr_ne
  | arr_se
  | arr_nw
  | arr_sw
}

arr_right       = { "->" }
arr_left        = { "<-" }
arr_up          = { "-^" }
arr_down        = { ^"-v" }
arr_long_right  = { "-->" }
arr_long_left   = { "<--" }
arr_double      = { "<->" }
arr_long_double = { "<-->" }
arr_thick_right = { "=>" }
// FIXME: Collides with op_eq_le
arr_thick_left        = { "<=" }
arr_thick_long_right  = { "==>" }
arr_thick_long_left   = { "<==" }
arr_thick_double      = { "<=>" }
arr_thick_long_double = { "<==>" }
// Diagonal
arr_ne = { "-/>" }
arr_nw = { "<\\-" }
arr_se = { "-\\>" }
arr_sw = { "</-" }

logic = {
    logic_and
  | logic_or
  | logic_and
  | logic_not
}

logic_and = { "&&" }
logic_or  = { "&|" | "||" }
logic_not = { "&!" | "¬" }

sets = {
    set_subsetne
  | set_subseteq
  | set_subset
  | set_union
  | set_intersection
  | set_complement
  | set_empty
  | set_minus
  | set_in
}

set_union        = { "{|" }
set_intersection = { "{&" }
set_complement   = { "{!" ~ ws? ~ mono }
set_minus        = { "{-" }
set_empty        = { "{0" }
set_in           = { "in" | "{" ~ ("i" | "c") }
set_subset       = { "{<" }
set_subseteq     = { "{<=" }
set_subsetne     = { "{<!=" | "{!<=" }

script       = { script_super | script_sub }
script_super = { "^" ~ ws? ~ mono }
script_sub   = { "_" ~ ws? ~ mono }

text      = { PUSH("#"*) ~ "\"" ~ text_expr ~ "\"" ~ POP }
text_expr = { (!("\"" ~ PEEK) ~ ANY)* }

collection = {
    col_tup
  | col_set
  | col_vec
}
delim      = { "," | "" }

collection_sym = _{
    // ws? ~ mono ~ (collection_delim ~ mono)* ~ ws?
    ws? ~ mono ~ (ws? ~ PUSH(delim) ~ ws? ~ mono ~ (ws? ~ PEEK ~ ws? ~ mono)* ~ DROP)? ~ ws?
}

col_set = { "{" ~ collection_sym? ~ "}" }
col_tup = { "(" ~ collection_sym? ~ ")" }
col_vec = { "[" ~ collection_sym? ~ "]" ~ col_vec_ext }

empty             = { "" }
col_vec_ext       = { col_vec_transpose | empty }
col_vec_transpose = { "T" }

command = {
    cmd_cases
  | cmd_sum
  | cmd_prod
}

cmd_cases      =  { "{" ~ (ws? ~ cmd_cases_kw ~ cmd_cases_expr)+ ~ ws? ~ "}" }
cmd_cases_kw   = _{ "case!" }
cmd_cases_expr =  { (ws? ~ !("case!") ~ mono)* }

cmd_sum  = { "sum" }
cmd_prod = { "prod" }

font = {
    (font_prefix_greek? ~ font_delim ~ font_greek)
  | ((font_prefix_greek ~ font_delim)? ~ font_greek)
  | (("|" ~ font_numcls) | (font_prefix_numcls ~ font_delim ~ font_numcls))
  | (font_prefix_curly? ~ font_delim ~ font_curly)
}

font_delim         = _{ "@" }
font_prefix_greek  = _{ ^"g" }
font_prefix_numcls = _{ ^"n" }
font_prefix_curly  = _{ ^"c" }

font_greek = {
    // Remove redundant, add single letters, order properly
    (^"A") ~ "lpha"
  | (^"B") ~ "eta"
  | (^"G") ~ "amma"
  | (^"D") ~ "elta"
  | (^"E") ~ "psilon"
  | (^"Z") ~ "eta"
  | (^"E") ~ "ta"
  | (^"T") ~ "heta"
  | (^"I") ~ "ota"
  | (^"K") ~ "appa"
  | (^"L") ~ "ambda"
  | (^"M") ~ "u"
  | (^"N") ~ "u"
  | (^"O") ~ "micron"
  | (^"P") ~ "i"
  | (^"R") ~ "ho"
  | (^"S") ~ "igma"
  | (^"T") ~ "au"
  | (^"U") ~ "psilon"
  | (^"P") ~ "hi"
  | (^"C") ~ "hi"
  | (^"P") ~ "si"
  | (^"O") ~ "mega"
  | "vepsilon"
  | "vrho"
  | "vtheta"
  | "vphi"
}

font_numcls = { UPPERCASE+ }
font_curly  = { UPPERCASE+ }

ws = _{ WHITE_SPACE+ }
